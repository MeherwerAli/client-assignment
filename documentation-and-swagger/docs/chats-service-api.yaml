openapi: 3.0.3
info:
  title: Chat Storage Microservice API
  description: |
    RAG Chat Storage microservice for managing chat sessions and messages.

    This service provides persistence and management for chat sessions and messages with the following features:
    - Create/Rename/Delete chat sessions
    - Mark/Unmark session as favorite
    - Add messages to session (user/assistant/system) with optional context payload
    - Retrieve paginated message history per session
    - API key protection, rate limiting, logging, and encryption

    ## ðŸ”‘ Authentication Required

    **API Key:** All endpoints require an API key in the `x-api-key` header.

    **Example for testing:** `test-api-key-12345`

    **Rate Limiting:** 60 requests per minute per IP address.
    **Traceability:** All requests require a `Unique-Reference-Code` header for logging.

    ### Required Headers:
    - `x-api-key: test-api-key-12345` (for testing)
    - `Unique-Reference-Code: REQ-123456789` (any unique string)

  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3002/chats-service/api/v1
    description: Development server
  - url: https://api.example.com/chats-service/api/v1
    description: Production server

security:
  - ApiKeyAuth: []

paths:
  /chats:
    post:
      summary: Create a new chat session
      description: Creates a new chat session with an optional title
      operationId: createSession
      tags:
        - Chat Sessions
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/UniqueReferenceCode"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionDto"
            examples:
              with_title:
                summary: Create session with title
                value:
                  title: "Planning my vacation"
              without_title:
                summary: Create session without title (default)
                value: {}
      responses:
        "201":
          description: Chat session created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatSession"
              example:
                _id: "64f8a1b2c3d4e5f6a7b8c9d0"
                title: "Planning my vacation"
                userId: null
                isFavorite: false
                lastMessageAt: null
                createdAt: "2024-09-15T10:30:00.000Z"
                updatedAt: "2024-09-15T10:30:00.000Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/RateLimited"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /chats/{id}:
    patch:
      summary: Rename a chat session
      description: Updates the title of an existing chat session
      operationId: renameSession
      tags:
        - Chat Sessions
      parameters:
        - $ref: "#/components/parameters/SessionId"
        - $ref: "#/components/parameters/UniqueReferenceCode"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenameSessionDto"
            example:
              title: "Updated vacation planning"
      responses:
        "200":
          description: Session renamed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatSession"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/RateLimited"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete a chat session
      description: Deletes a chat session and all associated messages
      operationId: deleteSession
      tags:
        - Chat Sessions
      parameters:
        - $ref: "#/components/parameters/SessionId"
        - $ref: "#/components/parameters/UniqueReferenceCode"
      responses:
        "200":
          description: Session deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Session deleted successfully"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/RateLimited"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /chats/{id}/favorite:
    patch:
      summary: Toggle session favorite status
      description: Marks or unmarks a chat session as favorite
      operationId: toggleFavorite
      tags:
        - Chat Sessions
      parameters:
        - $ref: "#/components/parameters/SessionId"
        - $ref: "#/components/parameters/UniqueReferenceCode"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ToggleFavoriteDto"
            examples:
              mark_favorite:
                summary: Mark as favorite
                value:
                  isFavorite: true
              unmark_favorite:
                summary: Unmark as favorite
                value:
                  isFavorite: false
      responses:
        "200":
          description: Favorite status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatSession"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/RateLimited"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /chats/{id}/messages:
    post:
      summary: Add a message to a chat session
      description: |
        Adds a new message to an existing chat session. Content is automatically encrypted for storage.
        The context field can contain RAG retrieval metadata or other relevant information.
      operationId: addMessage
      tags:
        - Chat Messages
      parameters:
        - $ref: "#/components/parameters/SessionId"
        - $ref: "#/components/parameters/UniqueReferenceCode"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMessageDto"
            examples:
              user_message:
                summary: User message
                value:
                  sender: "user"
                  content: "What's the weather like today?"
              assistant_message:
                summary: Assistant message with context
                value:
                  sender: "assistant"
                  content: "Based on current weather data, it's sunny and 75Â°F today."
                  context:
                    sources: ["weather-api"]
                    confidence: 0.95
                    timestamp: "2024-09-15T10:30:00.000Z"
              system_message:
                summary: System message
                value:
                  sender: "system"
                  content: "Chat session started"
      responses:
        "201":
          description: Message added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatMessage"
              example:
                _id: "64f8a1b2c3d4e5f6a7b8c9d1"
                sessionId: "64f8a1b2c3d4e5f6a7b8c9d0"
                sender: "user"
                content: "What's the weather like today?"
                context: null
                createdAt: "2024-09-15T10:35:00.000Z"
                updatedAt: "2024-09-15T10:35:00.000Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/RateLimited"
        "500":
          $ref: "#/components/responses/InternalServerError"

    get:
      summary: Get messages from a chat session
      description: |
        Retrieves paginated message history from a chat session, ordered by creation time (newest first).
        Content is automatically decrypted when retrieved.
      operationId: getMessages
      tags:
        - Chat Messages
      parameters:
        - $ref: "#/components/parameters/SessionId"
        - $ref: "#/components/parameters/UniqueReferenceCode"
        - name: limit
          in: query
          description: Number of messages to retrieve (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          example: 20
        - name: skip
          in: query
          description: Number of messages to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
      responses:
        "200":
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatMessage"
              example:
                - _id: "64f8a1b2c3d4e5f6a7b8c9d2"
                  sessionId: "64f8a1b2c3d4e5f6a7b8c9d0"
                  sender: "assistant"
                  content: "Based on current weather data, it's sunny and 75Â°F today."
                  context:
                    sources: ["weather-api"]
                    confidence: 0.95
                  createdAt: "2024-09-15T10:36:00.000Z"
                  updatedAt: "2024-09-15T10:36:00.000Z"
                - _id: "64f8a1b2c3d4e5f6a7b8c9d1"
                  sessionId: "64f8a1b2c3d4e5f6a7b8c9d0"
                  sender: "user"
                  content: "What's the weather like today?"
                  context: null
                  createdAt: "2024-09-15T10:35:00.000Z"
                  updatedAt: "2024-09-15T10:35:00.000Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/RateLimited"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /chats/{id}/smart-chat:
    post:
      summary: Send a smart chat message using AI
      description: |
        Sends a user message to the chat session and generates an intelligent AI response using OpenAI.

        The system automatically:
        - Retrieves the last 20 messages from the chat session for context
        - Sends the conversation history to OpenAI GPT model
        - Generates an intelligent response based on conversation context
        - Saves both the user message and AI response to the session

        **Conversation Memory:** The AI maintains context from previous messages in the session, 
        providing coherent and contextual responses just like ChatGPT.

        **Rate Limiting:** This endpoint may have additional rate limits due to OpenAI API usage.

        **Error Handling:** Returns appropriate error codes for OpenAI service issues:
        - 402: OpenAI quota exceeded
        - 429: Rate limit exceeded (either service or OpenAI)
        - 500: OpenAI service unavailable or other AI-related errors
      operationId: smartChat
      tags:
        - Messages
      parameters:
        - $ref: "#/components/parameters/SessionId"
        - $ref: "#/components/parameters/UniqueReferenceCode"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SmartChatDto"
            examples:
              simple_question:
                summary: Simple question
                description: A basic question that the AI can answer
                value:
                  message: "What's the weather like today?"
              with_context:
                summary: Question with context
                description: A question with additional context metadata
                value:
                  message: "Can you help me plan my vacation itinerary?"
                  context:
                    location: "Paris"
                    duration: "5 days"
                    interests: ["museums", "food", "architecture"]
              follow_up:
                summary: Follow-up question
                description: A follow-up question that relies on conversation history
                value:
                  message: "What about restaurants for dinner?"
      responses:
        "200":
          description: Smart chat response generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SmartChatResponse"
              examples:
                weather_response:
                  summary: Weather information response
                  description: AI response to a weather question
                  value:
                    userMessage:
                      id: "64f8a1b2c3d4e5f6a7b8c9d3"
                      content: "What's the weather like today?"
                      sender: "user"
                      createdAt: "2024-09-15T10:40:00.000Z"
                    assistantMessage:
                      id: "64f8a1b2c3d4e5f6a7b8c9d4"
                      content: "I don't have access to real-time weather data, but I can help you find current weather information. You could check weather apps like Weather.com, AccuWeather, or your local weather service for the most accurate and up-to-date conditions in your area."
                      sender: "assistant"
                      createdAt: "2024-09-15T10:40:05.000Z"
                    tokensUsed:
                      prompt: 45
                      completion: 52
                      total: 97
                vacation_response:
                  summary: Travel planning response
                  description: AI response to vacation planning with context
                  value:
                    userMessage:
                      id: "64f8a1b2c3d4e5f6a7b8c9d5"
                      content: "Can you help me plan my vacation itinerary?"
                      sender: "user"
                      createdAt: "2024-09-15T10:45:00.000Z"
                    assistantMessage:
                      id: "64f8a1b2c3d4e5f6a7b8c9d6"
                      content: "I'd be happy to help you plan your Paris vacation! Based on your interests in museums, food, and architecture, here's a suggested 5-day itinerary:\n\n**Day 1**: Start with the Louvre Museum and explore the historic architecture around Palais Royal.\n\n**Day 2**: Visit Notre-Dame Cathedral (exterior) and Sainte-Chapelle, then enjoy dinner in the Latin Quarter.\n\n**Day 3**: Explore Montmartre, visit SacrÃ©-CÅ“ur, and discover local bistros.\n\n**Day 4**: Tour the MusÃ©e d'Orsay and walk along the Seine, ending with dinner at a traditional brasserie.\n\n**Day 5**: Visit the Eiffel Tower area and explore the architecture of TrocadÃ©ro.\n\nWould you like me to elaborate on any specific day or aspect of your trip?"
                      sender: "assistant"
                      createdAt: "2024-09-15T10:45:08.000Z"
                    tokensUsed:
                      prompt: 89
                      completion: 168
                      total: 257
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          description: OpenAI quota exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                message: "OpenAI API quota has been exceeded"
                code: "OpenAIQuotaExceeded"
                timestamp: "2024-09-15T10:30:00.000Z"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          description: Rate limit exceeded (service or OpenAI)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                service_rate_limit:
                  summary: Service rate limit
                  description: Service-level rate limiting
                  value:
                    message: "Rate limit exceeded. Please try again later."
                    code: "RateLimitExceeded"
                    timestamp: "2024-09-15T10:30:00.000Z"
                openai_rate_limit:
                  summary: OpenAI rate limit
                  description: OpenAI API rate limiting
                  value:
                    message: "OpenAI API rate limit exceeded"
                    code: "OpenAIRateLimit"
                    timestamp: "2024-09-15T10:30:00.000Z"
        "500":
          description: OpenAI service error or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                openai_error:
                  summary: OpenAI service error
                  description: OpenAI API service unavailable or error
                  value:
                    message: "OpenAI service is currently unavailable"
                    code: "OpenAIError"
                    timestamp: "2024-09-15T10:30:00.000Z"
                internal_error:
                  summary: Internal server error
                  description: General internal server error
                  value:
                    message: "Internal server error"
                    code: "InternalServerError"
                    timestamp: "2024-09-15T10:30:00.000Z"

  /chats/health:
    get:
      summary: Health check endpoint
      description: Returns the health status and basic information about the service
      operationId: healthCheck
      tags:
        - Health
      security: [] # No authentication required for health check
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
              example:
                status: "ok"
                uptime: 3600.123
                version: "1.0.0"
                timestamp: "2024-09-15T10:30:00.000Z"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: |
        API key for authentication

        **Example for testing:** `test-api-key-12345`

        Add this header to all requests: `x-api-key: test-api-key-12345`

  parameters:
    SessionId:
      name: id
      in: path
      required: true
      description: MongoDB ObjectId of the chat session
      schema:
        type: string
        pattern: "^[0-9a-fA-F]{24}$"
        example: "64f8a1b2c3d4e5f6a7b8c9d0"

    UniqueReferenceCode:
      name: Unique-Reference-Code
      in: header
      required: true
      description: Unique reference code for request traceability and logging
      schema:
        type: string
        example: "REQ-123456789"

  schemas:
    CreateSessionDto:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Optional title for the chat session
          example: "Planning my vacation"
      example:
        title: "New chat session"

    RenameSessionDto:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: New title for the chat session
          example: "Updated vacation planning"

    ToggleFavoriteDto:
      type: object
      required:
        - isFavorite
      properties:
        isFavorite:
          type: boolean
          description: Whether to mark the session as favorite
          example: true

    AddMessageDto:
      type: object
      required:
        - sender
        - content
      properties:
        sender:
          type: string
          enum: [user, assistant, system]
          description: Who sent the message
          example: "user"
        content:
          type: string
          minLength: 1
          maxLength: 10000
          description: The message content (will be encrypted for storage)
          example: "What's the weather like today?"
        context:
          type: object
          description: Optional context information (e.g., RAG retrieval metadata)
          example:
            sources: ["weather-api"]
            confidence: 0.95
            timestamp: "2024-09-15T10:30:00.000Z"

    SmartChatDto:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 5000
          description: The user message to send to the AI assistant
          example: "What's the weather like today?"
        context:
          type: object
          description: Optional context information to provide additional metadata for the conversation
          example:
            location: "Paris"
            user_preferences: ["detailed_responses", "friendly_tone"]
            session_context: "travel_planning"
      example:
        message: "Can you help me plan my vacation itinerary for Paris?"
        context:
          duration: "5 days"
          interests: ["museums", "food", "architecture"]
          budget: "moderate"

    SmartChatResponse:
      type: object
      properties:
        userMessage:
          $ref: "#/components/schemas/ChatMessage"
        assistantMessage:
          $ref: "#/components/schemas/ChatMessage"
        tokensUsed:
          type: object
          properties:
            prompt:
              type: integer
              description: Number of tokens used for the prompt (input)
              example: 45
            completion:
              type: integer
              description: Number of tokens used for the completion (output)
              example: 52
            total:
              type: integer
              description: Total tokens used (prompt + completion)
              example: 97
          description: Token usage information from OpenAI API
      example:
        userMessage:
          _id: "64f8a1b2c3d4e5f6a7b8c9d3"
          sessionId: "64f8a1b2c3d4e5f6a7b8c9d0"
          sender: "user"
          content: "What's the weather like today?"
          context: null
          createdAt: "2024-09-15T10:40:00.000Z"
          updatedAt: "2024-09-15T10:40:00.000Z"
        assistantMessage:
          _id: "64f8a1b2c3d4e5f6a7b8c9d4"
          sessionId: "64f8a1b2c3d4e5f6a7b8c9d0"
          sender: "assistant"
          content: "I don't have access to real-time weather data, but I can help you find current weather information. You could check weather apps like Weather.com, AccuWeather, or your local weather service for the most accurate and up-to-date conditions in your area."
          context:
            model: "gpt-3.5-turbo"
            temperature: 0.7
            source: "openai"
          createdAt: "2024-09-15T10:40:05.000Z"
          updatedAt: "2024-09-15T10:40:05.000Z"
        tokensUsed:
          prompt: 45
          completion: 52
          total: 97

    ChatSession:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        title:
          type: string
          description: Session title
          example: "Planning my vacation"
        userId:
          type: string
          nullable: true
          description: Optional user identifier
          example: null
        isFavorite:
          type: boolean
          description: Whether the session is marked as favorite
          example: false
        lastMessageAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of the last message in this session
          example: "2024-09-15T10:35:00.000Z"
        createdAt:
          type: string
          format: date-time
          description: Session creation timestamp
          example: "2024-09-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Session last update timestamp
          example: "2024-09-15T10:30:00.000Z"

    ChatMessage:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
          example: "64f8a1b2c3d4e5f6a7b8c9d1"
        sessionId:
          type: string
          description: Reference to the chat session
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        sender:
          type: string
          enum: [user, assistant, system]
          description: Who sent the message
          example: "user"
        content:
          type: string
          description: The message content (decrypted when retrieved)
          example: "What's the weather like today?"
        context:
          type: object
          nullable: true
          description: Optional context information
          example:
            sources: ["weather-api"]
            confidence: 0.95
        createdAt:
          type: string
          format: date-time
          description: Message creation timestamp
          example: "2024-09-15T10:35:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Message last update timestamp
          example: "2024-09-15T10:35:00.000Z"

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          description: Service status
          example: "ok"
        uptime:
          type: number
          description: Service uptime in seconds
          example: 3600.123
        version:
          type: string
          description: Service version
          example: "1.0.0"
        timestamp:
          type: string
          format: date-time
          description: Current timestamp
          example: "2024-09-15T10:30:00.000Z"

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: Error response type
          example: "error-response"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorDetail"

    ErrorDetail:
      type: object
      properties:
        errorCode:
          type: string
          description: Specific error code
          example: "CHATS_SERVICE.SESSION.NOT_FOUND"
        errorMessage:
          type: string
          description: Human-readable error message
          example: "Session not found"
        errorDescription:
          type: string
          description: Detailed error description
          example: "The requested chat session does not exist or has been deleted"

  responses:
    BadRequest:
      description: Bad request - validation error or malformed request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            type: "error-response"
            errors:
              - errorCode: "CHATS_SERVICE.VALIDATION.INVALID_INPUT"
                errorMessage: "Validation failed"
                errorDescription: "Title cannot be longer than 200 characters"

    Unauthorized:
      description: Unauthorized - missing or invalid API key
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            type: "error-response"
            errors:
              - errorCode: "CHATS_SERVICE.AUTH.UNAUTHORIZED"
                errorMessage: "Authentication required"
                errorDescription: "Valid API key must be provided in x-api-key header"

    NotFound:
      description: Not found - requested resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            type: "error-response"
            errors:
              - errorCode: "CHATS_SERVICE.SESSION.NOT_FOUND"
                errorMessage: "Session not found"
                errorDescription: "The requested chat session does not exist or has been deleted"

    RateLimited:
      description: Too many requests - rate limit exceeded
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            type: "error-response"
            errors:
              - errorCode: "CHATS_SERVICE.RATE_LIMIT.EXCEEDED"
                errorMessage: "Rate limit exceeded"
                errorDescription: "Too many requests. Please try again later."

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            type: "error-response"
            errors:
              - errorCode: "CHATS_SERVICE.GLOBAL.UNMAPPED-ERROR"
                errorMessage: "Something went wrong, please try after sometime"
                errorDescription: "Error is not mapped in the service, please check log for further info"

  headers:
    Unique-Reference-Code:
      description: Unique reference code for request traceability
      required: true
      schema:
        type: string
        example: "REQ-123456789"
